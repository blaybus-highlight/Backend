name: Java CI/CD to EC2

on:
  push:
    branches: [ "main" ]

# GITHUB_TOKEN이 GHCR에 이미지를 쓸(write) 수 있도록 권한 부여
permissions:
  contents: read
  packages: write

jobs:
  build-push-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1. JDK 17 설정 (Docker 빌드 전 .jar 파일 생성이 필요한 경우)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      # 여기에 './gradlew bootJar' 같은 빌드 명령어를 추가할 수 있습니다.

      # 2. 컨테이너 레지스트리(GHCR)에 로그인
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Docker 이미지 태그 자동 생성
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      # 4. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # 5. EC2 인스턴스에 배포
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            
            cd /home/ec2-user/Backend
            
            git pull origin main
            # 배포에 사용할 정확한 이미지 이름 변수 설정 (latest 태그 사용)
            export IMAGE_NAME="ghcr.io/${{ github.repository }}:latest"
            
            # GitHub Secret을 사용해 .env 파일 생성
            echo "${{ secrets.ENV_FILE }}" > .env
            
            # EC2 인스턴스에서 GHCR에 로그인
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # 최신 버전의 이미지 다운로드
            docker pull $IMAGE_NAME
            
            # docker-compose 실행 (docker-compose.yml이 IMAGE_NAME 변수를 사용하도록 설정 필요)
            docker-compose -f docker-compose.yml up -d --remove-orphans