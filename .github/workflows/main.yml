# 워크플로우 이름
name: Highlight Backend CI/CD

# 워크플로우 실행 조건: main 브랜치에 push가 발생했을 때
on:
  push:
    branches: [ "main" ]

# 실행될 작업들 정의
jobs:
  build-and-deploy:
    # 실행 환경: 최신 버전의 Ubuntu
    runs-on: ubuntu-latest
    
    # 작업 단계들
    steps:
      # 1. 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. application.yml 생성 (GitHub Secrets 사용)
      # 중요: 민감 정보를 코드에 노출하지 않기 위해 GitHub Secrets에 저장된 내용을 파일로 생성합니다.
      - name: Create application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > src/main/resources/application.yml

      # 4. Gradle 실행 권한 부여 및 빌드
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew build

      # 5. Docker Hub 로그인 (GitHub Secrets 사용)
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          # 태그: <DockerHub 유저명>/<이미지명>:latest
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/highlight-backend:main

      # 7. EC2에 배포 (GitHub Secrets 사용)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 기존 컨테이너 중지 및 삭제 (오류 발생해도 계속 진행)
            docker stop highlight-backend || true
            docker rm highlight-backend || true
            
            # 최신 이미지 pull
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/highlight-backend:main
            
            # 새로운 컨테이너 실행
            docker run -d -p 8085:8085 --name highlight-backend ${{ secrets.DOCKERHUB_USERNAME }}/highlight-backend:main
            
            # 사용하지 않는 이미지 정리 (디스크 용량 확보)
            docker image prune -f
            
